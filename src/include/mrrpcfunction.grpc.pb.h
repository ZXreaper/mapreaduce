// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mrrpcfunction.proto
#ifndef GRPC_mrrpcfunction_2eproto__INCLUDED
#define GRPC_mrrpcfunction_2eproto__INCLUDED

#include "mrrpcfunction.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mrrpc {

class RpcAssignTask final {
 public:
  static constexpr char const* service_full_name() {
    return "mrrpc.RpcAssignTask";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // worker给master发送请求，获取任务
    virtual ::grpc::Status AssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::mrrpc::Task* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::Task>> AsyncAssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::Task>>(AsyncAssignTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::Task>> PrepareAsyncAssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::Task>>(PrepareAsyncAssignTaskRaw(context, request, cq));
    }
    // worker向master报告任务已经做完
    virtual ::grpc::Status TaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::mrrpc::TaskCompletedReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::TaskCompletedReply>> AsyncTaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::TaskCompletedReply>>(AsyncTaskCompletedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::TaskCompletedReply>> PrepareAsyncTaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::TaskCompletedReply>>(PrepareAsyncTaskCompletedRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // worker给master发送请求，获取任务
      virtual void AssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest* request, ::mrrpc::Task* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest* request, ::mrrpc::Task* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // worker向master报告任务已经做完
      virtual void TaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task* request, ::mrrpc::TaskCompletedReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task* request, ::mrrpc::TaskCompletedReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::Task>* AsyncAssignTaskRaw(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::Task>* PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::TaskCompletedReply>* AsyncTaskCompletedRaw(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mrrpc::TaskCompletedReply>* PrepareAsyncTaskCompletedRaw(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::mrrpc::Task* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::Task>> AsyncAssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::Task>>(AsyncAssignTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::Task>> PrepareAsyncAssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::Task>>(PrepareAsyncAssignTaskRaw(context, request, cq));
    }
    ::grpc::Status TaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::mrrpc::TaskCompletedReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::TaskCompletedReply>> AsyncTaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::TaskCompletedReply>>(AsyncTaskCompletedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::TaskCompletedReply>> PrepareAsyncTaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mrrpc::TaskCompletedReply>>(PrepareAsyncTaskCompletedRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest* request, ::mrrpc::Task* response, std::function<void(::grpc::Status)>) override;
      void AssignTask(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest* request, ::mrrpc::Task* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task* request, ::mrrpc::TaskCompletedReply* response, std::function<void(::grpc::Status)>) override;
      void TaskCompleted(::grpc::ClientContext* context, const ::mrrpc::Task* request, ::mrrpc::TaskCompletedReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mrrpc::Task>* AsyncAssignTaskRaw(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mrrpc::Task>* PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, const ::mrrpc::AssignTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mrrpc::TaskCompletedReply>* AsyncTaskCompletedRaw(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mrrpc::TaskCompletedReply>* PrepareAsyncTaskCompletedRaw(::grpc::ClientContext* context, const ::mrrpc::Task& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AssignTask_;
    const ::grpc::internal::RpcMethod rpcmethod_TaskCompleted_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // worker给master发送请求，获取任务
    virtual ::grpc::Status AssignTask(::grpc::ServerContext* context, const ::mrrpc::AssignTaskRequest* request, ::mrrpc::Task* response);
    // worker向master报告任务已经做完
    virtual ::grpc::Status TaskCompleted(::grpc::ServerContext* context, const ::mrrpc::Task* request, ::mrrpc::TaskCompletedReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AssignTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::mrrpc::AssignTaskRequest* /*request*/, ::mrrpc::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignTask(::grpc::ServerContext* context, ::mrrpc::AssignTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::mrrpc::Task>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* /*context*/, const ::mrrpc::Task* /*request*/, ::mrrpc::TaskCompletedReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskCompleted(::grpc::ServerContext* context, ::mrrpc::Task* request, ::grpc::ServerAsyncResponseWriter< ::mrrpc::TaskCompletedReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AssignTask<WithAsyncMethod_TaskCompleted<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AssignTask() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mrrpc::AssignTaskRequest, ::mrrpc::Task>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mrrpc::AssignTaskRequest* request, ::mrrpc::Task* response) { return this->AssignTask(context, request, response); }));}
    void SetMessageAllocatorFor_AssignTask(
        ::grpc::MessageAllocator< ::mrrpc::AssignTaskRequest, ::mrrpc::Task>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mrrpc::AssignTaskRequest, ::mrrpc::Task>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::mrrpc::AssignTaskRequest* /*request*/, ::mrrpc::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssignTask(
      ::grpc::CallbackServerContext* /*context*/, const ::mrrpc::AssignTaskRequest* /*request*/, ::mrrpc::Task* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mrrpc::Task, ::mrrpc::TaskCompletedReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mrrpc::Task* request, ::mrrpc::TaskCompletedReply* response) { return this->TaskCompleted(context, request, response); }));}
    void SetMessageAllocatorFor_TaskCompleted(
        ::grpc::MessageAllocator< ::mrrpc::Task, ::mrrpc::TaskCompletedReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mrrpc::Task, ::mrrpc::TaskCompletedReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* /*context*/, const ::mrrpc::Task* /*request*/, ::mrrpc::TaskCompletedReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TaskCompleted(
      ::grpc::CallbackServerContext* /*context*/, const ::mrrpc::Task* /*request*/, ::mrrpc::TaskCompletedReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AssignTask<WithCallbackMethod_TaskCompleted<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AssignTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::mrrpc::AssignTaskRequest* /*request*/, ::mrrpc::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* /*context*/, const ::mrrpc::Task* /*request*/, ::mrrpc::TaskCompletedReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AssignTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::mrrpc::AssignTaskRequest* /*request*/, ::mrrpc::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* /*context*/, const ::mrrpc::Task* /*request*/, ::mrrpc::TaskCompletedReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskCompleted(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AssignTask() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AssignTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::mrrpc::AssignTaskRequest* /*request*/, ::mrrpc::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AssignTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TaskCompleted(context, request, response); }));
    }
    ~WithRawCallbackMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* /*context*/, const ::mrrpc::Task* /*request*/, ::mrrpc::TaskCompletedReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TaskCompleted(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AssignTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mrrpc::AssignTaskRequest, ::mrrpc::Task>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mrrpc::AssignTaskRequest, ::mrrpc::Task>* streamer) {
                       return this->StreamedAssignTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, const ::mrrpc::AssignTaskRequest* /*request*/, ::mrrpc::Task* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAssignTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mrrpc::AssignTaskRequest,::mrrpc::Task>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mrrpc::Task, ::mrrpc::TaskCompletedReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mrrpc::Task, ::mrrpc::TaskCompletedReply>* streamer) {
                       return this->StreamedTaskCompleted(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* /*context*/, const ::mrrpc::Task* /*request*/, ::mrrpc::TaskCompletedReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTaskCompleted(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mrrpc::Task,::mrrpc::TaskCompletedReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AssignTask<WithStreamedUnaryMethod_TaskCompleted<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AssignTask<WithStreamedUnaryMethod_TaskCompleted<Service > > StreamedService;
};

}  // namespace mrrpc


#endif  // GRPC_mrrpcfunction_2eproto__INCLUDED
