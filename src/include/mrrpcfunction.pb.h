// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrrpcfunction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mrrpcfunction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mrrpcfunction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mrrpcfunction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mrrpcfunction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mrrpcfunction_2eproto;
namespace mrrpc {
class AssignTaskRequest;
struct AssignTaskRequestDefaultTypeInternal;
extern AssignTaskRequestDefaultTypeInternal _AssignTaskRequest_default_instance_;
class RPCTask;
struct RPCTaskDefaultTypeInternal;
extern RPCTaskDefaultTypeInternal _RPCTask_default_instance_;
class TaskCompletedReply;
struct TaskCompletedReplyDefaultTypeInternal;
extern TaskCompletedReplyDefaultTypeInternal _TaskCompletedReply_default_instance_;
class keyvalue;
struct keyvalueDefaultTypeInternal;
extern keyvalueDefaultTypeInternal _keyvalue_default_instance_;
}  // namespace mrrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::mrrpc::AssignTaskRequest* Arena::CreateMaybeMessage<::mrrpc::AssignTaskRequest>(Arena*);
template<> ::mrrpc::RPCTask* Arena::CreateMaybeMessage<::mrrpc::RPCTask>(Arena*);
template<> ::mrrpc::TaskCompletedReply* Arena::CreateMaybeMessage<::mrrpc::TaskCompletedReply>(Arena*);
template<> ::mrrpc::keyvalue* Arena::CreateMaybeMessage<::mrrpc::keyvalue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mrrpc {

// ===================================================================

class AssignTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrrpc.AssignTaskRequest) */ {
 public:
  inline AssignTaskRequest() : AssignTaskRequest(nullptr) {}
  ~AssignTaskRequest() override;
  explicit constexpr AssignTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssignTaskRequest(const AssignTaskRequest& from);
  AssignTaskRequest(AssignTaskRequest&& from) noexcept
    : AssignTaskRequest() {
    *this = ::std::move(from);
  }

  inline AssignTaskRequest& operator=(const AssignTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignTaskRequest& operator=(AssignTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignTaskRequest* internal_default_instance() {
    return reinterpret_cast<const AssignTaskRequest*>(
               &_AssignTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssignTaskRequest& a, AssignTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssignTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssignTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AssignTaskRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssignTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrrpc.AssignTaskRequest";
  }
  protected:
  explicit AssignTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignArgFieldNumber = 1,
  };
  // bytes assign_arg = 1;
  void clear_assign_arg();
  const std::string& assign_arg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assign_arg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assign_arg();
  PROTOBUF_NODISCARD std::string* release_assign_arg();
  void set_allocated_assign_arg(std::string* assign_arg);
  private:
  const std::string& _internal_assign_arg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assign_arg(const std::string& value);
  std::string* _internal_mutable_assign_arg();
  public:

  // @@protoc_insertion_point(class_scope:mrrpc.AssignTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assign_arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mrrpcfunction_2eproto;
};
// -------------------------------------------------------------------

class keyvalue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrrpc.keyvalue) */ {
 public:
  inline keyvalue() : keyvalue(nullptr) {}
  ~keyvalue() override;
  explicit constexpr keyvalue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  keyvalue(const keyvalue& from);
  keyvalue(keyvalue&& from) noexcept
    : keyvalue() {
    *this = ::std::move(from);
  }

  inline keyvalue& operator=(const keyvalue& from) {
    CopyFrom(from);
    return *this;
  }
  inline keyvalue& operator=(keyvalue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const keyvalue& default_instance() {
    return *internal_default_instance();
  }
  static inline const keyvalue* internal_default_instance() {
    return reinterpret_cast<const keyvalue*>(
               &_keyvalue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(keyvalue& a, keyvalue& b) {
    a.Swap(&b);
  }
  inline void Swap(keyvalue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keyvalue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  keyvalue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<keyvalue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const keyvalue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const keyvalue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keyvalue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrrpc.keyvalue";
  }
  protected:
  explicit keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyValuePairFieldNumber = 1,
  };
  // string key_value_pair = 1;
  void clear_key_value_pair();
  const std::string& key_value_pair() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_value_pair(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_value_pair();
  PROTOBUF_NODISCARD std::string* release_key_value_pair();
  void set_allocated_key_value_pair(std::string* key_value_pair);
  private:
  const std::string& _internal_key_value_pair() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_value_pair(const std::string& value);
  std::string* _internal_mutable_key_value_pair();
  public:

  // @@protoc_insertion_point(class_scope:mrrpc.keyvalue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_value_pair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mrrpcfunction_2eproto;
};
// -------------------------------------------------------------------

class RPCTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrrpc.RPCTask) */ {
 public:
  inline RPCTask() : RPCTask(nullptr) {}
  ~RPCTask() override;
  explicit constexpr RPCTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCTask(const RPCTask& from);
  RPCTask(RPCTask&& from) noexcept
    : RPCTask() {
    *this = ::std::move(from);
  }

  inline RPCTask& operator=(const RPCTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCTask& operator=(RPCTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCTask* internal_default_instance() {
    return reinterpret_cast<const RPCTask*>(
               &_RPCTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RPCTask& a, RPCTask& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrrpc.RPCTask";
  }
  protected:
  explicit RPCTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediatesFieldNumber = 3,
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kNreducerFieldNumber = 4,
    kTaskNoFieldNumber = 5,
    kTaskStateFieldNumber = 6,
  };
  // repeated .mrrpc.keyvalue intermediates = 3;
  int intermediates_size() const;
  private:
  int _internal_intermediates_size() const;
  public:
  void clear_intermediates();
  ::mrrpc::keyvalue* mutable_intermediates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mrrpc::keyvalue >*
      mutable_intermediates();
  private:
  const ::mrrpc::keyvalue& _internal_intermediates(int index) const;
  ::mrrpc::keyvalue* _internal_add_intermediates();
  public:
  const ::mrrpc::keyvalue& intermediates(int index) const;
  ::mrrpc::keyvalue* add_intermediates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mrrpc::keyvalue >&
      intermediates() const;

  // string inputs = 1;
  void clear_inputs();
  const std::string& inputs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputs();
  PROTOBUF_NODISCARD std::string* release_inputs();
  void set_allocated_inputs(std::string* inputs);
  private:
  const std::string& _internal_inputs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputs(const std::string& value);
  std::string* _internal_mutable_inputs();
  public:

  // string outputs = 2;
  void clear_outputs();
  const std::string& outputs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputs();
  PROTOBUF_NODISCARD std::string* release_outputs();
  void set_allocated_outputs(std::string* outputs);
  private:
  const std::string& _internal_outputs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputs(const std::string& value);
  std::string* _internal_mutable_outputs();
  public:

  // int32 nreducer = 4;
  void clear_nreducer();
  int32_t nreducer() const;
  void set_nreducer(int32_t value);
  private:
  int32_t _internal_nreducer() const;
  void _internal_set_nreducer(int32_t value);
  public:

  // int32 task_no = 5;
  void clear_task_no();
  int32_t task_no() const;
  void set_task_no(int32_t value);
  private:
  int32_t _internal_task_no() const;
  void _internal_set_task_no(int32_t value);
  public:

  // int32 task_state = 6;
  void clear_task_state();
  int32_t task_state() const;
  void set_task_state(int32_t value);
  private:
  int32_t _internal_task_state() const;
  void _internal_set_task_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mrrpc.RPCTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mrrpc::keyvalue > intermediates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputs_;
  int32_t nreducer_;
  int32_t task_no_;
  int32_t task_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mrrpcfunction_2eproto;
};
// -------------------------------------------------------------------

class TaskCompletedReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mrrpc.TaskCompletedReply) */ {
 public:
  inline TaskCompletedReply() : TaskCompletedReply(nullptr) {}
  ~TaskCompletedReply() override;
  explicit constexpr TaskCompletedReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCompletedReply(const TaskCompletedReply& from);
  TaskCompletedReply(TaskCompletedReply&& from) noexcept
    : TaskCompletedReply() {
    *this = ::std::move(from);
  }

  inline TaskCompletedReply& operator=(const TaskCompletedReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCompletedReply& operator=(TaskCompletedReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskCompletedReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCompletedReply* internal_default_instance() {
    return reinterpret_cast<const TaskCompletedReply*>(
               &_TaskCompletedReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskCompletedReply& a, TaskCompletedReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCompletedReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCompletedReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskCompletedReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskCompletedReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskCompletedReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskCompletedReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCompletedReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mrrpc.TaskCompletedReply";
  }
  protected:
  explicit TaskCompletedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedReplyFieldNumber = 1,
  };
  // string completed_reply = 1;
  void clear_completed_reply();
  const std::string& completed_reply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_completed_reply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_completed_reply();
  PROTOBUF_NODISCARD std::string* release_completed_reply();
  void set_allocated_completed_reply(std::string* completed_reply);
  private:
  const std::string& _internal_completed_reply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_completed_reply(const std::string& value);
  std::string* _internal_mutable_completed_reply();
  public:

  // @@protoc_insertion_point(class_scope:mrrpc.TaskCompletedReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr completed_reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mrrpcfunction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssignTaskRequest

// bytes assign_arg = 1;
inline void AssignTaskRequest::clear_assign_arg() {
  assign_arg_.ClearToEmpty();
}
inline const std::string& AssignTaskRequest::assign_arg() const {
  // @@protoc_insertion_point(field_get:mrrpc.AssignTaskRequest.assign_arg)
  return _internal_assign_arg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssignTaskRequest::set_assign_arg(ArgT0&& arg0, ArgT... args) {
 
 assign_arg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mrrpc.AssignTaskRequest.assign_arg)
}
inline std::string* AssignTaskRequest::mutable_assign_arg() {
  std::string* _s = _internal_mutable_assign_arg();
  // @@protoc_insertion_point(field_mutable:mrrpc.AssignTaskRequest.assign_arg)
  return _s;
}
inline const std::string& AssignTaskRequest::_internal_assign_arg() const {
  return assign_arg_.Get();
}
inline void AssignTaskRequest::_internal_set_assign_arg(const std::string& value) {
  
  assign_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AssignTaskRequest::_internal_mutable_assign_arg() {
  
  return assign_arg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AssignTaskRequest::release_assign_arg() {
  // @@protoc_insertion_point(field_release:mrrpc.AssignTaskRequest.assign_arg)
  return assign_arg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AssignTaskRequest::set_allocated_assign_arg(std::string* assign_arg) {
  if (assign_arg != nullptr) {
    
  } else {
    
  }
  assign_arg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assign_arg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (assign_arg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    assign_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mrrpc.AssignTaskRequest.assign_arg)
}

// -------------------------------------------------------------------

// keyvalue

// string key_value_pair = 1;
inline void keyvalue::clear_key_value_pair() {
  key_value_pair_.ClearToEmpty();
}
inline const std::string& keyvalue::key_value_pair() const {
  // @@protoc_insertion_point(field_get:mrrpc.keyvalue.key_value_pair)
  return _internal_key_value_pair();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void keyvalue::set_key_value_pair(ArgT0&& arg0, ArgT... args) {
 
 key_value_pair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mrrpc.keyvalue.key_value_pair)
}
inline std::string* keyvalue::mutable_key_value_pair() {
  std::string* _s = _internal_mutable_key_value_pair();
  // @@protoc_insertion_point(field_mutable:mrrpc.keyvalue.key_value_pair)
  return _s;
}
inline const std::string& keyvalue::_internal_key_value_pair() const {
  return key_value_pair_.Get();
}
inline void keyvalue::_internal_set_key_value_pair(const std::string& value) {
  
  key_value_pair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* keyvalue::_internal_mutable_key_value_pair() {
  
  return key_value_pair_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* keyvalue::release_key_value_pair() {
  // @@protoc_insertion_point(field_release:mrrpc.keyvalue.key_value_pair)
  return key_value_pair_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void keyvalue::set_allocated_key_value_pair(std::string* key_value_pair) {
  if (key_value_pair != nullptr) {
    
  } else {
    
  }
  key_value_pair_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_value_pair,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_value_pair_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_value_pair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mrrpc.keyvalue.key_value_pair)
}

// -------------------------------------------------------------------

// RPCTask

// string inputs = 1;
inline void RPCTask::clear_inputs() {
  inputs_.ClearToEmpty();
}
inline const std::string& RPCTask::inputs() const {
  // @@protoc_insertion_point(field_get:mrrpc.RPCTask.inputs)
  return _internal_inputs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCTask::set_inputs(ArgT0&& arg0, ArgT... args) {
 
 inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mrrpc.RPCTask.inputs)
}
inline std::string* RPCTask::mutable_inputs() {
  std::string* _s = _internal_mutable_inputs();
  // @@protoc_insertion_point(field_mutable:mrrpc.RPCTask.inputs)
  return _s;
}
inline const std::string& RPCTask::_internal_inputs() const {
  return inputs_.Get();
}
inline void RPCTask::_internal_set_inputs(const std::string& value) {
  
  inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCTask::_internal_mutable_inputs() {
  
  return inputs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCTask::release_inputs() {
  // @@protoc_insertion_point(field_release:mrrpc.RPCTask.inputs)
  return inputs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RPCTask::set_allocated_inputs(std::string* inputs) {
  if (inputs != nullptr) {
    
  } else {
    
  }
  inputs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputs,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inputs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    inputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mrrpc.RPCTask.inputs)
}

// string outputs = 2;
inline void RPCTask::clear_outputs() {
  outputs_.ClearToEmpty();
}
inline const std::string& RPCTask::outputs() const {
  // @@protoc_insertion_point(field_get:mrrpc.RPCTask.outputs)
  return _internal_outputs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCTask::set_outputs(ArgT0&& arg0, ArgT... args) {
 
 outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mrrpc.RPCTask.outputs)
}
inline std::string* RPCTask::mutable_outputs() {
  std::string* _s = _internal_mutable_outputs();
  // @@protoc_insertion_point(field_mutable:mrrpc.RPCTask.outputs)
  return _s;
}
inline const std::string& RPCTask::_internal_outputs() const {
  return outputs_.Get();
}
inline void RPCTask::_internal_set_outputs(const std::string& value) {
  
  outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCTask::_internal_mutable_outputs() {
  
  return outputs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCTask::release_outputs() {
  // @@protoc_insertion_point(field_release:mrrpc.RPCTask.outputs)
  return outputs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RPCTask::set_allocated_outputs(std::string* outputs) {
  if (outputs != nullptr) {
    
  } else {
    
  }
  outputs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputs,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outputs_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    outputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mrrpc.RPCTask.outputs)
}

// repeated .mrrpc.keyvalue intermediates = 3;
inline int RPCTask::_internal_intermediates_size() const {
  return intermediates_.size();
}
inline int RPCTask::intermediates_size() const {
  return _internal_intermediates_size();
}
inline void RPCTask::clear_intermediates() {
  intermediates_.Clear();
}
inline ::mrrpc::keyvalue* RPCTask::mutable_intermediates(int index) {
  // @@protoc_insertion_point(field_mutable:mrrpc.RPCTask.intermediates)
  return intermediates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mrrpc::keyvalue >*
RPCTask::mutable_intermediates() {
  // @@protoc_insertion_point(field_mutable_list:mrrpc.RPCTask.intermediates)
  return &intermediates_;
}
inline const ::mrrpc::keyvalue& RPCTask::_internal_intermediates(int index) const {
  return intermediates_.Get(index);
}
inline const ::mrrpc::keyvalue& RPCTask::intermediates(int index) const {
  // @@protoc_insertion_point(field_get:mrrpc.RPCTask.intermediates)
  return _internal_intermediates(index);
}
inline ::mrrpc::keyvalue* RPCTask::_internal_add_intermediates() {
  return intermediates_.Add();
}
inline ::mrrpc::keyvalue* RPCTask::add_intermediates() {
  ::mrrpc::keyvalue* _add = _internal_add_intermediates();
  // @@protoc_insertion_point(field_add:mrrpc.RPCTask.intermediates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mrrpc::keyvalue >&
RPCTask::intermediates() const {
  // @@protoc_insertion_point(field_list:mrrpc.RPCTask.intermediates)
  return intermediates_;
}

// int32 nreducer = 4;
inline void RPCTask::clear_nreducer() {
  nreducer_ = 0;
}
inline int32_t RPCTask::_internal_nreducer() const {
  return nreducer_;
}
inline int32_t RPCTask::nreducer() const {
  // @@protoc_insertion_point(field_get:mrrpc.RPCTask.nreducer)
  return _internal_nreducer();
}
inline void RPCTask::_internal_set_nreducer(int32_t value) {
  
  nreducer_ = value;
}
inline void RPCTask::set_nreducer(int32_t value) {
  _internal_set_nreducer(value);
  // @@protoc_insertion_point(field_set:mrrpc.RPCTask.nreducer)
}

// int32 task_no = 5;
inline void RPCTask::clear_task_no() {
  task_no_ = 0;
}
inline int32_t RPCTask::_internal_task_no() const {
  return task_no_;
}
inline int32_t RPCTask::task_no() const {
  // @@protoc_insertion_point(field_get:mrrpc.RPCTask.task_no)
  return _internal_task_no();
}
inline void RPCTask::_internal_set_task_no(int32_t value) {
  
  task_no_ = value;
}
inline void RPCTask::set_task_no(int32_t value) {
  _internal_set_task_no(value);
  // @@protoc_insertion_point(field_set:mrrpc.RPCTask.task_no)
}

// int32 task_state = 6;
inline void RPCTask::clear_task_state() {
  task_state_ = 0;
}
inline int32_t RPCTask::_internal_task_state() const {
  return task_state_;
}
inline int32_t RPCTask::task_state() const {
  // @@protoc_insertion_point(field_get:mrrpc.RPCTask.task_state)
  return _internal_task_state();
}
inline void RPCTask::_internal_set_task_state(int32_t value) {
  
  task_state_ = value;
}
inline void RPCTask::set_task_state(int32_t value) {
  _internal_set_task_state(value);
  // @@protoc_insertion_point(field_set:mrrpc.RPCTask.task_state)
}

// -------------------------------------------------------------------

// TaskCompletedReply

// string completed_reply = 1;
inline void TaskCompletedReply::clear_completed_reply() {
  completed_reply_.ClearToEmpty();
}
inline const std::string& TaskCompletedReply::completed_reply() const {
  // @@protoc_insertion_point(field_get:mrrpc.TaskCompletedReply.completed_reply)
  return _internal_completed_reply();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskCompletedReply::set_completed_reply(ArgT0&& arg0, ArgT... args) {
 
 completed_reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mrrpc.TaskCompletedReply.completed_reply)
}
inline std::string* TaskCompletedReply::mutable_completed_reply() {
  std::string* _s = _internal_mutable_completed_reply();
  // @@protoc_insertion_point(field_mutable:mrrpc.TaskCompletedReply.completed_reply)
  return _s;
}
inline const std::string& TaskCompletedReply::_internal_completed_reply() const {
  return completed_reply_.Get();
}
inline void TaskCompletedReply::_internal_set_completed_reply(const std::string& value) {
  
  completed_reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskCompletedReply::_internal_mutable_completed_reply() {
  
  return completed_reply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskCompletedReply::release_completed_reply() {
  // @@protoc_insertion_point(field_release:mrrpc.TaskCompletedReply.completed_reply)
  return completed_reply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskCompletedReply::set_allocated_completed_reply(std::string* completed_reply) {
  if (completed_reply != nullptr) {
    
  } else {
    
  }
  completed_reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), completed_reply,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (completed_reply_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    completed_reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mrrpc.TaskCompletedReply.completed_reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mrrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mrrpcfunction_2eproto
