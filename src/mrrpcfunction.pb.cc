// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrrpcfunction.proto

#include "mrrpcfunction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mrrpc {
constexpr AssignTaskRequest::AssignTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assign_arg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AssignTaskRequestDefaultTypeInternal {
  constexpr AssignTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssignTaskRequestDefaultTypeInternal() {}
  union {
    AssignTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssignTaskRequestDefaultTypeInternal _AssignTaskRequest_default_instance_;
constexpr keyvalue::keyvalue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_value_pair_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct keyvalueDefaultTypeInternal {
  constexpr keyvalueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~keyvalueDefaultTypeInternal() {}
  union {
    keyvalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT keyvalueDefaultTypeInternal _keyvalue_default_instance_;
constexpr RPCTask::RPCTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intermediates_()
  , inputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , outputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reducer_no_(0)
  , task_state_(0)
  , task_status_(0){}
struct RPCTaskDefaultTypeInternal {
  constexpr RPCTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RPCTaskDefaultTypeInternal() {}
  union {
    RPCTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RPCTaskDefaultTypeInternal _RPCTask_default_instance_;
constexpr TaskCompletedReply::TaskCompletedReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completed_reply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskCompletedReplyDefaultTypeInternal {
  constexpr TaskCompletedReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskCompletedReplyDefaultTypeInternal() {}
  union {
    TaskCompletedReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskCompletedReplyDefaultTypeInternal _TaskCompletedReply_default_instance_;
}  // namespace mrrpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mrrpcfunction_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mrrpcfunction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mrrpcfunction_2eproto = nullptr;

const uint32_t TableStruct_mrrpcfunction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::AssignTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::AssignTaskRequest, assign_arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::keyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::keyvalue, key_value_pair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, inputs_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, outputs_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, intermediates_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, reducer_no_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, task_state_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, task_status_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, start_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::TaskCompletedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::TaskCompletedReply, completed_reply_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mrrpc::AssignTaskRequest)},
  { 7, -1, -1, sizeof(::mrrpc::keyvalue)},
  { 14, -1, -1, sizeof(::mrrpc::RPCTask)},
  { 27, -1, -1, sizeof(::mrrpc::TaskCompletedReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mrrpc::_AssignTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mrrpc::_keyvalue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mrrpc::_RPCTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mrrpc::_TaskCompletedReply_default_instance_),
};

const char descriptor_table_protodef_mrrpcfunction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023mrrpcfunction.proto\022\005mrrpc\"\'\n\021AssignTa"
  "skRequest\022\022\n\nassign_arg\030\001 \001(\014\"\"\n\010keyvalu"
  "e\022\026\n\016key_value_pair\030\001 \001(\t\"\243\001\n\007RPCTask\022\016\n"
  "\006inputs\030\001 \001(\t\022\017\n\007outputs\030\002 \001(\t\022&\n\rinterm"
  "ediates\030\003 \003(\0132\017.mrrpc.keyvalue\022\022\n\nreduce"
  "r_no\030\004 \001(\005\022\022\n\ntask_state\030\005 \001(\005\022\023\n\013task_s"
  "tatus\030\006 \001(\005\022\022\n\nstart_time\030\007 \001(\t\"-\n\022TaskC"
  "ompletedReply\022\027\n\017completed_reply\030\001 \001(\t2\207"
  "\001\n\rRpcAssignTask\0228\n\nAssignTask\022\030.mrrpc.A"
  "ssignTaskRequest\032\016.mrrpc.RPCTask\"\000\022<\n\rTa"
  "skCompleted\022\016.mrrpc.RPCTask\032\031.mrrpc.Task"
  "CompletedReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mrrpcfunction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mrrpcfunction_2eproto = {
  false, false, 464, descriptor_table_protodef_mrrpcfunction_2eproto, "mrrpcfunction.proto", 
  &descriptor_table_mrrpcfunction_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_mrrpcfunction_2eproto::offsets,
  file_level_metadata_mrrpcfunction_2eproto, file_level_enum_descriptors_mrrpcfunction_2eproto, file_level_service_descriptors_mrrpcfunction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mrrpcfunction_2eproto_getter() {
  return &descriptor_table_mrrpcfunction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mrrpcfunction_2eproto(&descriptor_table_mrrpcfunction_2eproto);
namespace mrrpc {

// ===================================================================

class AssignTaskRequest::_Internal {
 public:
};

AssignTaskRequest::AssignTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mrrpc.AssignTaskRequest)
}
AssignTaskRequest::AssignTaskRequest(const AssignTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assign_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    assign_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_assign_arg().empty()) {
    assign_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assign_arg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mrrpc.AssignTaskRequest)
}

inline void AssignTaskRequest::SharedCtor() {
assign_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  assign_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssignTaskRequest::~AssignTaskRequest() {
  // @@protoc_insertion_point(destructor:mrrpc.AssignTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssignTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  assign_arg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssignTaskRequest::ArenaDtor(void* object) {
  AssignTaskRequest* _this = reinterpret_cast< AssignTaskRequest* >(object);
  (void)_this;
}
void AssignTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssignTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.AssignTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assign_arg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes assign_arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_assign_arg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.AssignTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes assign_arg = 1;
  if (!this->_internal_assign_arg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_assign_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.AssignTaskRequest)
  return target;
}

size_t AssignTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.AssignTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes assign_arg = 1;
  if (!this->_internal_assign_arg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assign_arg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssignTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignTaskRequest::GetClassData() const { return &_class_data_; }

void AssignTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssignTaskRequest *>(to)->MergeFrom(
      static_cast<const AssignTaskRequest &>(from));
}


void AssignTaskRequest::MergeFrom(const AssignTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.AssignTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_assign_arg().empty()) {
    _internal_set_assign_arg(from._internal_assign_arg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignTaskRequest::CopyFrom(const AssignTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.AssignTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignTaskRequest::IsInitialized() const {
  return true;
}

void AssignTaskRequest::InternalSwap(AssignTaskRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assign_arg_, lhs_arena,
      &other->assign_arg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[0]);
}

// ===================================================================

class keyvalue::_Internal {
 public:
};

keyvalue::keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mrrpc.keyvalue)
}
keyvalue::keyvalue(const keyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_value_pair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_value_pair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_value_pair().empty()) {
    key_value_pair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_value_pair(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mrrpc.keyvalue)
}

inline void keyvalue::SharedCtor() {
key_value_pair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_value_pair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

keyvalue::~keyvalue() {
  // @@protoc_insertion_point(destructor:mrrpc.keyvalue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void keyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_value_pair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void keyvalue::ArenaDtor(void* object) {
  keyvalue* _this = reinterpret_cast< keyvalue* >(object);
  (void)_this;
}
void keyvalue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void keyvalue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void keyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.keyvalue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_value_pair_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* keyvalue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_value_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_value_pair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mrrpc.keyvalue.key_value_pair"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* keyvalue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.keyvalue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_value_pair = 1;
  if (!this->_internal_key_value_pair().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_value_pair().data(), static_cast<int>(this->_internal_key_value_pair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.keyvalue.key_value_pair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_value_pair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.keyvalue)
  return target;
}

size_t keyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.keyvalue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_value_pair = 1;
  if (!this->_internal_key_value_pair().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_value_pair());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData keyvalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    keyvalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*keyvalue::GetClassData() const { return &_class_data_; }

void keyvalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<keyvalue *>(to)->MergeFrom(
      static_cast<const keyvalue &>(from));
}


void keyvalue::MergeFrom(const keyvalue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.keyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_value_pair().empty()) {
    _internal_set_key_value_pair(from._internal_key_value_pair());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void keyvalue::CopyFrom(const keyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keyvalue::IsInitialized() const {
  return true;
}

void keyvalue::InternalSwap(keyvalue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_value_pair_, lhs_arena,
      &other->key_value_pair_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata keyvalue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[1]);
}

// ===================================================================

class RPCTask::_Internal {
 public:
};

RPCTask::RPCTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  intermediates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mrrpc.RPCTask)
}
RPCTask::RPCTask(const RPCTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      intermediates_(from.intermediates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inputs().empty()) {
    inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inputs(), 
      GetArenaForAllocation());
  }
  outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    outputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outputs().empty()) {
    outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputs(), 
      GetArenaForAllocation());
  }
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_time().empty()) {
    start_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_time(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reducer_no_, &from.reducer_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_status_) -
    reinterpret_cast<char*>(&reducer_no_)) + sizeof(task_status_));
  // @@protoc_insertion_point(copy_constructor:mrrpc.RPCTask)
}

inline void RPCTask::SharedCtor() {
inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  outputs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reducer_no_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&task_status_) -
    reinterpret_cast<char*>(&reducer_no_)) + sizeof(task_status_));
}

RPCTask::~RPCTask() {
  // @@protoc_insertion_point(destructor:mrrpc.RPCTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RPCTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  inputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCTask::ArenaDtor(void* object) {
  RPCTask* _this = reinterpret_cast< RPCTask* >(object);
  (void)_this;
}
void RPCTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RPCTask::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.RPCTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intermediates_.Clear();
  inputs_.ClearToEmpty();
  outputs_.ClearToEmpty();
  start_time_.ClearToEmpty();
  ::memset(&reducer_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_status_) -
      reinterpret_cast<char*>(&reducer_no_)) + sizeof(task_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mrrpc.RPCTask.inputs"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_outputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mrrpc.RPCTask.outputs"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mrrpc.keyvalue intermediates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intermediates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 reducer_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          reducer_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          task_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          task_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_start_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mrrpc.RPCTask.start_time"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.RPCTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inputs = 1;
  if (!this->_internal_inputs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inputs().data(), static_cast<int>(this->_internal_inputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.RPCTask.inputs");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inputs(), target);
  }

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputs().data(), static_cast<int>(this->_internal_outputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.RPCTask.outputs");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_outputs(), target);
  }

  // repeated .mrrpc.keyvalue intermediates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intermediates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_intermediates(i), target, stream);
  }

  // int32 reducer_no = 4;
  if (this->_internal_reducer_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reducer_no(), target);
  }

  // int32 task_state = 5;
  if (this->_internal_task_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_task_state(), target);
  }

  // int32 task_status = 6;
  if (this->_internal_task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_task_status(), target);
  }

  // string start_time = 7;
  if (!this->_internal_start_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.RPCTask.start_time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.RPCTask)
  return target;
}

size_t RPCTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.RPCTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mrrpc.keyvalue intermediates = 3;
  total_size += 1UL * this->_internal_intermediates_size();
  for (const auto& msg : this->intermediates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string inputs = 1;
  if (!this->_internal_inputs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inputs());
  }

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputs());
  }

  // string start_time = 7;
  if (!this->_internal_start_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_time());
  }

  // int32 reducer_no = 4;
  if (this->_internal_reducer_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reducer_no());
  }

  // int32 task_state = 5;
  if (this->_internal_task_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_task_state());
  }

  // int32 task_status = 6;
  if (this->_internal_task_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_task_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RPCTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCTask::GetClassData() const { return &_class_data_; }

void RPCTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RPCTask *>(to)->MergeFrom(
      static_cast<const RPCTask &>(from));
}


void RPCTask::MergeFrom(const RPCTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.RPCTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  intermediates_.MergeFrom(from.intermediates_);
  if (!from._internal_inputs().empty()) {
    _internal_set_inputs(from._internal_inputs());
  }
  if (!from._internal_outputs().empty()) {
    _internal_set_outputs(from._internal_outputs());
  }
  if (!from._internal_start_time().empty()) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_reducer_no() != 0) {
    _internal_set_reducer_no(from._internal_reducer_no());
  }
  if (from._internal_task_state() != 0) {
    _internal_set_task_state(from._internal_task_state());
  }
  if (from._internal_task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCTask::CopyFrom(const RPCTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.RPCTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCTask::IsInitialized() const {
  return true;
}

void RPCTask::InternalSwap(RPCTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  intermediates_.InternalSwap(&other->intermediates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &inputs_, lhs_arena,
      &other->inputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &outputs_, lhs_arena,
      &other->outputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_time_, lhs_arena,
      &other->start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCTask, task_status_)
      + sizeof(RPCTask::task_status_)
      - PROTOBUF_FIELD_OFFSET(RPCTask, reducer_no_)>(
          reinterpret_cast<char*>(&reducer_no_),
          reinterpret_cast<char*>(&other->reducer_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[2]);
}

// ===================================================================

class TaskCompletedReply::_Internal {
 public:
};

TaskCompletedReply::TaskCompletedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mrrpc.TaskCompletedReply)
}
TaskCompletedReply::TaskCompletedReply(const TaskCompletedReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  completed_reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    completed_reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_completed_reply().empty()) {
    completed_reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_completed_reply(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mrrpc.TaskCompletedReply)
}

inline void TaskCompletedReply::SharedCtor() {
completed_reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  completed_reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskCompletedReply::~TaskCompletedReply() {
  // @@protoc_insertion_point(destructor:mrrpc.TaskCompletedReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskCompletedReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  completed_reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskCompletedReply::ArenaDtor(void* object) {
  TaskCompletedReply* _this = reinterpret_cast< TaskCompletedReply* >(object);
  (void)_this;
}
void TaskCompletedReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskCompletedReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskCompletedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.TaskCompletedReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  completed_reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskCompletedReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string completed_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_completed_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mrrpc.TaskCompletedReply.completed_reply"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskCompletedReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.TaskCompletedReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string completed_reply = 1;
  if (!this->_internal_completed_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_completed_reply().data(), static_cast<int>(this->_internal_completed_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.TaskCompletedReply.completed_reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_completed_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.TaskCompletedReply)
  return target;
}

size_t TaskCompletedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.TaskCompletedReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string completed_reply = 1;
  if (!this->_internal_completed_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completed_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskCompletedReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskCompletedReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskCompletedReply::GetClassData() const { return &_class_data_; }

void TaskCompletedReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskCompletedReply *>(to)->MergeFrom(
      static_cast<const TaskCompletedReply &>(from));
}


void TaskCompletedReply::MergeFrom(const TaskCompletedReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.TaskCompletedReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_completed_reply().empty()) {
    _internal_set_completed_reply(from._internal_completed_reply());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskCompletedReply::CopyFrom(const TaskCompletedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.TaskCompletedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCompletedReply::IsInitialized() const {
  return true;
}

void TaskCompletedReply::InternalSwap(TaskCompletedReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &completed_reply_, lhs_arena,
      &other->completed_reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCompletedReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mrrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mrrpc::AssignTaskRequest* Arena::CreateMaybeMessage< ::mrrpc::AssignTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::AssignTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mrrpc::keyvalue* Arena::CreateMaybeMessage< ::mrrpc::keyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::keyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::mrrpc::RPCTask* Arena::CreateMaybeMessage< ::mrrpc::RPCTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::RPCTask >(arena);
}
template<> PROTOBUF_NOINLINE ::mrrpc::TaskCompletedReply* Arena::CreateMaybeMessage< ::mrrpc::TaskCompletedReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::TaskCompletedReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
