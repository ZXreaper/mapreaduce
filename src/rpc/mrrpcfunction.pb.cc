// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrrpcfunction.proto

#include "mrrpcfunction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mrrpc {
PROTOBUF_CONSTEXPR AssignTaskRequest::AssignTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.assign_arg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssignTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignTaskRequestDefaultTypeInternal() {}
  union {
    AssignTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignTaskRequestDefaultTypeInternal _AssignTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR keyvalue::keyvalue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_value_pair_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct keyvalueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR keyvalueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~keyvalueDefaultTypeInternal() {}
  union {
    keyvalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 keyvalueDefaultTypeInternal _keyvalue_default_instance_;
PROTOBUF_CONSTEXPR RPCTask::RPCTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.intermediates_)*/{}
  , /*decltype(_impl_.inputs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outputs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nreducer_)*/0
  , /*decltype(_impl_.task_no_)*/0
  , /*decltype(_impl_.task_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPCTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPCTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPCTaskDefaultTypeInternal() {}
  union {
    RPCTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPCTaskDefaultTypeInternal _RPCTask_default_instance_;
PROTOBUF_CONSTEXPR TaskCompletedReply::TaskCompletedReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.completed_reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskCompletedReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskCompletedReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskCompletedReplyDefaultTypeInternal() {}
  union {
    TaskCompletedReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskCompletedReplyDefaultTypeInternal _TaskCompletedReply_default_instance_;
}  // namespace mrrpc
static ::_pb::Metadata file_level_metadata_mrrpcfunction_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_mrrpcfunction_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mrrpcfunction_2eproto = nullptr;

const uint32_t TableStruct_mrrpcfunction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::AssignTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::AssignTaskRequest, _impl_.assign_arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::keyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::keyvalue, _impl_.key_value_pair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _impl_.outputs_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _impl_.intermediates_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _impl_.nreducer_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _impl_.task_no_),
  PROTOBUF_FIELD_OFFSET(::mrrpc::RPCTask, _impl_.task_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mrrpc::TaskCompletedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mrrpc::TaskCompletedReply, _impl_.completed_reply_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mrrpc::AssignTaskRequest)},
  { 7, -1, -1, sizeof(::mrrpc::keyvalue)},
  { 14, -1, -1, sizeof(::mrrpc::RPCTask)},
  { 26, -1, -1, sizeof(::mrrpc::TaskCompletedReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mrrpc::_AssignTaskRequest_default_instance_._instance,
  &::mrrpc::_keyvalue_default_instance_._instance,
  &::mrrpc::_RPCTask_default_instance_._instance,
  &::mrrpc::_TaskCompletedReply_default_instance_._instance,
};

const char descriptor_table_protodef_mrrpcfunction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023mrrpcfunction.proto\022\005mrrpc\"\'\n\021AssignTa"
  "skRequest\022\022\n\nassign_arg\030\001 \001(\014\"\"\n\010keyvalu"
  "e\022\026\n\016key_value_pair\030\001 \001(\t\"\211\001\n\007RPCTask\022\016\n"
  "\006inputs\030\001 \001(\t\022\017\n\007outputs\030\002 \001(\t\022&\n\rinterm"
  "ediates\030\003 \003(\0132\017.mrrpc.keyvalue\022\020\n\010nreduc"
  "er\030\004 \001(\005\022\017\n\007task_no\030\005 \001(\005\022\022\n\ntask_state\030"
  "\006 \001(\005\"-\n\022TaskCompletedReply\022\027\n\017completed"
  "_reply\030\001 \001(\t2\207\001\n\rRpcAssignTask\0228\n\nAssign"
  "Task\022\030.mrrpc.AssignTaskRequest\032\016.mrrpc.R"
  "PCTask\"\000\022<\n\rTaskCompleted\022\016.mrrpc.RPCTas"
  "k\032\031.mrrpc.TaskCompletedReply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_mrrpcfunction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mrrpcfunction_2eproto = {
    false, false, 438, descriptor_table_protodef_mrrpcfunction_2eproto,
    "mrrpcfunction.proto",
    &descriptor_table_mrrpcfunction_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_mrrpcfunction_2eproto::offsets,
    file_level_metadata_mrrpcfunction_2eproto, file_level_enum_descriptors_mrrpcfunction_2eproto,
    file_level_service_descriptors_mrrpcfunction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mrrpcfunction_2eproto_getter() {
  return &descriptor_table_mrrpcfunction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mrrpcfunction_2eproto(&descriptor_table_mrrpcfunction_2eproto);
namespace mrrpc {

// ===================================================================

class AssignTaskRequest::_Internal {
 public:
};

AssignTaskRequest::AssignTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mrrpc.AssignTaskRequest)
}
AssignTaskRequest::AssignTaskRequest(const AssignTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssignTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.assign_arg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.assign_arg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assign_arg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_assign_arg().empty()) {
    _this->_impl_.assign_arg_.Set(from._internal_assign_arg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mrrpc.AssignTaskRequest)
}

inline void AssignTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.assign_arg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.assign_arg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assign_arg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssignTaskRequest::~AssignTaskRequest() {
  // @@protoc_insertion_point(destructor:mrrpc.AssignTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assign_arg_.Destroy();
}

void AssignTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssignTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.AssignTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assign_arg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes assign_arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_assign_arg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.AssignTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes assign_arg = 1;
  if (!this->_internal_assign_arg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_assign_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.AssignTaskRequest)
  return target;
}

size_t AssignTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.AssignTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes assign_arg = 1;
  if (!this->_internal_assign_arg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assign_arg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssignTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignTaskRequest::GetClassData() const { return &_class_data_; }


void AssignTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssignTaskRequest*>(&to_msg);
  auto& from = static_cast<const AssignTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.AssignTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_assign_arg().empty()) {
    _this->_internal_set_assign_arg(from._internal_assign_arg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignTaskRequest::CopyFrom(const AssignTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.AssignTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignTaskRequest::IsInitialized() const {
  return true;
}

void AssignTaskRequest::InternalSwap(AssignTaskRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.assign_arg_, lhs_arena,
      &other->_impl_.assign_arg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[0]);
}

// ===================================================================

class keyvalue::_Internal {
 public:
};

keyvalue::keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mrrpc.keyvalue)
}
keyvalue::keyvalue(const keyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  keyvalue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_value_pair_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_value_pair_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_value_pair_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_value_pair().empty()) {
    _this->_impl_.key_value_pair_.Set(from._internal_key_value_pair(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mrrpc.keyvalue)
}

inline void keyvalue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_value_pair_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_value_pair_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_value_pair_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

keyvalue::~keyvalue() {
  // @@protoc_insertion_point(destructor:mrrpc.keyvalue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void keyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_value_pair_.Destroy();
}

void keyvalue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void keyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.keyvalue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_value_pair_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* keyvalue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_value_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_value_pair();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mrrpc.keyvalue.key_value_pair"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* keyvalue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.keyvalue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_value_pair = 1;
  if (!this->_internal_key_value_pair().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_value_pair().data(), static_cast<int>(this->_internal_key_value_pair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.keyvalue.key_value_pair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_value_pair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.keyvalue)
  return target;
}

size_t keyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.keyvalue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_value_pair = 1;
  if (!this->_internal_key_value_pair().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_value_pair());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData keyvalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    keyvalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*keyvalue::GetClassData() const { return &_class_data_; }


void keyvalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<keyvalue*>(&to_msg);
  auto& from = static_cast<const keyvalue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.keyvalue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_value_pair().empty()) {
    _this->_internal_set_key_value_pair(from._internal_key_value_pair());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void keyvalue::CopyFrom(const keyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keyvalue::IsInitialized() const {
  return true;
}

void keyvalue::InternalSwap(keyvalue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_value_pair_, lhs_arena,
      &other->_impl_.key_value_pair_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata keyvalue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[1]);
}

// ===================================================================

class RPCTask::_Internal {
 public:
};

RPCTask::RPCTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mrrpc.RPCTask)
}
RPCTask::RPCTask(const RPCTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPCTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediates_){from._impl_.intermediates_}
    , decltype(_impl_.inputs_){}
    , decltype(_impl_.outputs_){}
    , decltype(_impl_.nreducer_){}
    , decltype(_impl_.task_no_){}
    , decltype(_impl_.task_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inputs().empty()) {
    _this->_impl_.inputs_.Set(from._internal_inputs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outputs().empty()) {
    _this->_impl_.outputs_.Set(from._internal_outputs(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nreducer_, &from._impl_.nreducer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.task_state_) -
    reinterpret_cast<char*>(&_impl_.nreducer_)) + sizeof(_impl_.task_state_));
  // @@protoc_insertion_point(copy_constructor:mrrpc.RPCTask)
}

inline void RPCTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediates_){arena}
    , decltype(_impl_.inputs_){}
    , decltype(_impl_.outputs_){}
    , decltype(_impl_.nreducer_){0}
    , decltype(_impl_.task_no_){0}
    , decltype(_impl_.task_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outputs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPCTask::~RPCTask() {
  // @@protoc_insertion_point(destructor:mrrpc.RPCTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPCTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.intermediates_.~RepeatedPtrField();
  _impl_.inputs_.Destroy();
  _impl_.outputs_.Destroy();
}

void RPCTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPCTask::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.RPCTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intermediates_.Clear();
  _impl_.inputs_.ClearToEmpty();
  _impl_.outputs_.ClearToEmpty();
  ::memset(&_impl_.nreducer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.task_state_) -
      reinterpret_cast<char*>(&_impl_.nreducer_)) + sizeof(_impl_.task_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inputs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mrrpc.RPCTask.inputs"));
        } else
          goto handle_unusual;
        continue;
      // string outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_outputs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mrrpc.RPCTask.outputs"));
        } else
          goto handle_unusual;
        continue;
      // repeated .mrrpc.keyvalue intermediates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intermediates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 nreducer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.nreducer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_no = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.task_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 task_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.task_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.RPCTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inputs = 1;
  if (!this->_internal_inputs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inputs().data(), static_cast<int>(this->_internal_inputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.RPCTask.inputs");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inputs(), target);
  }

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputs().data(), static_cast<int>(this->_internal_outputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.RPCTask.outputs");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_outputs(), target);
  }

  // repeated .mrrpc.keyvalue intermediates = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intermediates_size()); i < n; i++) {
    const auto& repfield = this->_internal_intermediates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 nreducer = 4;
  if (this->_internal_nreducer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_nreducer(), target);
  }

  // int32 task_no = 5;
  if (this->_internal_task_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_task_no(), target);
  }

  // int32 task_state = 6;
  if (this->_internal_task_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_task_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.RPCTask)
  return target;
}

size_t RPCTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.RPCTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mrrpc.keyvalue intermediates = 3;
  total_size += 1UL * this->_internal_intermediates_size();
  for (const auto& msg : this->_impl_.intermediates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string inputs = 1;
  if (!this->_internal_inputs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inputs());
  }

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputs());
  }

  // int32 nreducer = 4;
  if (this->_internal_nreducer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nreducer());
  }

  // int32 task_no = 5;
  if (this->_internal_task_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_no());
  }

  // int32 task_state = 6;
  if (this->_internal_task_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPCTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCTask::GetClassData() const { return &_class_data_; }


void RPCTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPCTask*>(&to_msg);
  auto& from = static_cast<const RPCTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.RPCTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.intermediates_.MergeFrom(from._impl_.intermediates_);
  if (!from._internal_inputs().empty()) {
    _this->_internal_set_inputs(from._internal_inputs());
  }
  if (!from._internal_outputs().empty()) {
    _this->_internal_set_outputs(from._internal_outputs());
  }
  if (from._internal_nreducer() != 0) {
    _this->_internal_set_nreducer(from._internal_nreducer());
  }
  if (from._internal_task_no() != 0) {
    _this->_internal_set_task_no(from._internal_task_no());
  }
  if (from._internal_task_state() != 0) {
    _this->_internal_set_task_state(from._internal_task_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCTask::CopyFrom(const RPCTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.RPCTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCTask::IsInitialized() const {
  return true;
}

void RPCTask::InternalSwap(RPCTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.intermediates_.InternalSwap(&other->_impl_.intermediates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inputs_, lhs_arena,
      &other->_impl_.inputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outputs_, lhs_arena,
      &other->_impl_.outputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.task_state_)
      + sizeof(RPCTask::_impl_.task_state_)
      - PROTOBUF_FIELD_OFFSET(RPCTask, _impl_.nreducer_)>(
          reinterpret_cast<char*>(&_impl_.nreducer_),
          reinterpret_cast<char*>(&other->_impl_.nreducer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[2]);
}

// ===================================================================

class TaskCompletedReply::_Internal {
 public:
};

TaskCompletedReply::TaskCompletedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mrrpc.TaskCompletedReply)
}
TaskCompletedReply::TaskCompletedReply(const TaskCompletedReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskCompletedReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.completed_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.completed_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completed_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_completed_reply().empty()) {
    _this->_impl_.completed_reply_.Set(from._internal_completed_reply(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mrrpc.TaskCompletedReply)
}

inline void TaskCompletedReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.completed_reply_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.completed_reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completed_reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskCompletedReply::~TaskCompletedReply() {
  // @@protoc_insertion_point(destructor:mrrpc.TaskCompletedReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskCompletedReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.completed_reply_.Destroy();
}

void TaskCompletedReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskCompletedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:mrrpc.TaskCompletedReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.completed_reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskCompletedReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string completed_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_completed_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mrrpc.TaskCompletedReply.completed_reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskCompletedReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrrpc.TaskCompletedReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string completed_reply = 1;
  if (!this->_internal_completed_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_completed_reply().data(), static_cast<int>(this->_internal_completed_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mrrpc.TaskCompletedReply.completed_reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_completed_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrrpc.TaskCompletedReply)
  return target;
}

size_t TaskCompletedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mrrpc.TaskCompletedReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string completed_reply = 1;
  if (!this->_internal_completed_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completed_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskCompletedReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskCompletedReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskCompletedReply::GetClassData() const { return &_class_data_; }


void TaskCompletedReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskCompletedReply*>(&to_msg);
  auto& from = static_cast<const TaskCompletedReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mrrpc.TaskCompletedReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_completed_reply().empty()) {
    _this->_internal_set_completed_reply(from._internal_completed_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskCompletedReply::CopyFrom(const TaskCompletedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mrrpc.TaskCompletedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCompletedReply::IsInitialized() const {
  return true;
}

void TaskCompletedReply::InternalSwap(TaskCompletedReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.completed_reply_, lhs_arena,
      &other->_impl_.completed_reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCompletedReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mrrpcfunction_2eproto_getter, &descriptor_table_mrrpcfunction_2eproto_once,
      file_level_metadata_mrrpcfunction_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mrrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mrrpc::AssignTaskRequest*
Arena::CreateMaybeMessage< ::mrrpc::AssignTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::AssignTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mrrpc::keyvalue*
Arena::CreateMaybeMessage< ::mrrpc::keyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::keyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::mrrpc::RPCTask*
Arena::CreateMaybeMessage< ::mrrpc::RPCTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::RPCTask >(arena);
}
template<> PROTOBUF_NOINLINE ::mrrpc::TaskCompletedReply*
Arena::CreateMaybeMessage< ::mrrpc::TaskCompletedReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mrrpc::TaskCompletedReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
